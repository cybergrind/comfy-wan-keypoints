[build-system]
requires = ["setuptools>=70.0"]
build-backend = "setuptools.build_meta"

[project]
name = "comfy_wan_keypoints"
version = "0.9.0"
description = "WAN Keypoints"
authors = [
  {name = "comfy-wan-keypoints", email = "cybergrind@gmail.com"}
]
readme = "README.md"
license = {text = "MIT license"}
requires-python = ">=3.10"
classifiers = []
dependencies = [

]

[dependency-groups]
dev = [
    'ruff',
 'pre-commit>=4.1.0',
 'uv>=0.6.1',
 "pytest>=8.4.1",
]

[project.optional-dependencies]
dev = [
    "bump-my-version",
    "coverage",  # testing
    "mypy",  # linting
    "pre-commit", # runs linting on commit
    "pytest",  # testing
    "ruff",  # linting
]

[project.urls]
Repository = "https://github.com/cybergrind/wan_keypoints"
BugTracker = "https://github.com/cybergrind/wan_keypoints/issues"
Documentation = "https://github.com/cybergrind/wan_keypoints/wiki"


[tool.comfy]
PublisherId = "cybergrind"
DisplayName = "WAN Keypoints"
Icon = ""
Tags = []
Repository = "https://github.com/cybergrind/wan_keypoints"

includes = []

[tool.setuptools.package-data]
"*" = ["*.*"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = [
    "tests",
]
python_files = "test_*.py"
norecursedirs = "__pycache__ .git .venv"

[tool.mypy]
files = "."

# Use strict defaults
strict = true
warn_unreachable = true
warn_no_return = true

[[tool.mypy.overrides]]
# Don't require test functions to include types
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"

[tool.ruff]
# extend-exclude = ["static", "ci/templates"]
line-length = 120
src = ["src", "tests"]
target-version = "py310"

# Add rules to ban exec/eval
[tool.ruff.lint]
select = [
    "S102",  # exec-builtin
    "S307",  # eval-used
    "W293",
    "F",  # The "F" series in Ruff stands for "Pyflakes" rules, which catch various Python syntax errors and undefined names.
    # See all rules here: https://docs.astral.sh/ruff/rules/#pyflakes-f
    'E',     # pycodestyle
    'F',     # pyflakes
    'I',     # isort
    'G',     # flake8-logging-format
    'ASYNC', # flake8-async
    'PIE',   # flake8-pie
    'T20',   # flake8-print
    'PT',    # flake8-pytest-style
    'Q',     # flake8-quotes
    'RUF',
]
ignore = [
  'T201',  # print
  'G004',  # logging format
  'Q000',  # quotes
  'Q001',  # quotes
  'Q003',  # quotes
]
fixable = ['ALL']

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ['comfy_wan_keypoints']
lines-after-imports = 2

[tool.ruff.lint.flake8-quotes]
docstring-quotes = 'double'
inline-quotes = 'single'
multiline-quotes = 'single'
